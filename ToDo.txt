#To Do List

void Channel::CHANGE_Pass(Client *client, bool add, std::vector<std::string> argument)

void Channel::USER_Limit(Client *client, bool add, std::vector<std::string> argument)

void Server::PRIVMSG(Client *client, std::vector<std::string> argument, std::string prv_msg)
    ERR SI MESSAGE VIDE

void Server::read_data_from_socket(Client *client)
{
    if (std::find(_clients.begin(), _clients.end(), client) == _clients.end()) 
    {
        std::cerr << "[Server] Attempted to read from a disconnected client" << std::endl;
        return;
    }



int create_server_socket(int port)

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////                                                     TEST                                                                                   ///////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    

